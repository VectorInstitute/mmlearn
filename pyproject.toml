[tool.poetry]
name = "mmlearn"
version = "0.1.0a0.dev6" # https://www.python.org/dev/peps/pep-0440/#version-schemes
description = "A modular framework for research on multimodal representation learning."
readme = "README.md"
authors = ["Vector AI Engineering <ai_engineering@vectorinstitute.ai>"]
license = "Apache-2.0"
repository = "https://github.com/VectorInstitute/mmlearn"
packages = [
    { include = "mmlearn"},
]

[tool.poetry.dependencies]
python = ">=3.10, <3.13"
numpy = "^1.26.4"
pyarrow = "^17.0.0"
hydra-core = "^1.3.2"
hydra-zen = "^0.13.0"
hydra-submitit-launcher = "^1.2.0"
transformers = "^4.45.0"
torch = "^2.4.1"
lightning = "^2.4.0"
pandas = {version="^2.2.3", extras=["performance"]}
torchvision = "^0.19.1"

opencv-python = {version = "^4.10.0.84", optional = true}
timm = {version = "^1.0.8", optional = true}
torchaudio = {version = "^2.4.1", optional = true}
peft = {version = "^0.13.1", optional = true}


[tool.poetry.group.vision.dependencies]
opencv-python = "^4.10.0.84"
timm = "^1.0.9"

[tool.poetry.group.audio.dependencies]
torchaudio = "^2.4.1"

[tool.poetry.group.peft]
optional = true

[tool.poetry.group.peft.dependencies]
peft = "^0.13.1"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
wandb = "^0.18.3"
ipykernel = "^6.29.5"
ipython = "8.28.0"
h5py = "^3.12.1"
scikit-learn = "^1.5.2"
faiss-gpu = "^1.7.2"
pip = "^24.2"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
ruff = "^0.6.9"
mypy = "^1.11.2"
pytest = "^8.3.3"
pre-commit = "^4.0.1"
nbqa = { version = "^1.9.0", extras = ["toolchain"] }
pip-audit = "^2.7.3"
typos = "^1.26.0"

[tool.poetry.extras]
peft = ["peft"]
vision = ["opencv-python", "timm"]
audio = ["torchaudio"]

[tool.mypy]
ignore_missing_imports = true
install_types = true
pretty = true
namespace_packages = true
explicit_package_bases = true
non_interactive = true
warn_unused_configs = true
allow_any_generics = false
allow_untyped_calls = false
allow_untyped_defs = false
allow_incomplete_defs = false
check_untyped_defs = true
allow_untyped_decorators = false
warn_unreachable = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
implicit_reexport = false
strict_equality = true
extra_checks = true

[tool.ruff]
include = ["*.py", "pyproject.toml", "*.ipynb"]
line-length = 88

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # pyflakes
    "I", # isort
    "W", # pycodestyle
    "N", # pep8-naming
    "ERA", # eradicate
    "PL", # pylint
]
fixable = ["A", "B", "COM", "C4", "RET", "SIM", "ICN", "Q", "RSE", "D", "E", "F", "I", "W", "N", "ERA", "PL"]
ignore = [
    "E501", # line length violation
    "C901", # `function_name` is too complex
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value used in comparison
    "COM812", # Missing trailing comma
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401", "F403", "F811"] # Ignore import violations in all `__init__.py` files.
"projects/*" = ["D", "F", "I"] # Ignore docstring, pyflakes, and isort violations in all `projects` files.

[tool.ruff.lint.pep8-naming]
ignore-names = ["X*", "setUp*"]

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
pythonpath = [
  "."
]
markers = [
    "integration_test: marks tests as integration tests",
]

[tool.poetry.scripts]
mmlearn_run = 'mmlearn.cli.run:main'

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

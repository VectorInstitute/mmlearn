[project]
name = "mmlearn"
version = "0.1.0b2"
description = "A modular framework for research on multimodal representation learning."
readme = "README.md"
authors = [{name = "Vector AI Engineering", email = "ai_engineering@vectorinstitute.ai"}]
license = "Apache-2.0"
documentation = "https://vectorinstitute.github.io/mmlearn/"
repository = "https://github.com/VectorInstitute/mmlearn"
requires-python = ">=3.10,<3.13"
dependencies = [
    "numpy>=1.26.4,<2.0.0",
    "pyarrow>=17.0.0,<18.0.0",
    "hydra-core>=1.3.2,<2.0.0",
    "hydra-zen>=0.13.0,<0.14.0",
    "hydra-submitit-launcher>=1.2.0,<2.0.0",
    "transformers>=4.48.3,<5.0.0",
    "torch>=2.5.1,<2.6.0",
    "lightning>=2.5.0.post0,<3.0.0",
    "pandas>=2.2.3,<3.0.0; extra == 'performance'",
    "bottleneck>=1.4.2,<2.0.0",
    "torchvision>=0.20.1,<0.21.0"
]

[project.optional-dependencies]
vision = ["opencv-python>=4.11.0.86,<5.0.0", "timm>=1.0.14,<2.0.0"]
audio = ["torchaudio>=2.5.1,<2.6.0"]
peft = ["peft>=0.14.0,<0.15.0"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "wandb>=0.19.6,<0.20.0",
    "ipykernel>=6.29.5,<7.0.0",
    "ipython==8.32.0",
    "ipywidgets>=8.1.5,<9.0.0",
    "scikit-learn>=1.6.1,<2.0.0",
    "pip>=24.3.1,<25.0.0",
    "datasets>=3.2.0,<4.0.0",
    "ruff>=0.9.6,<0.10.0",
    "mypy>=1.15.0,<2.0.0",
    "pytest>=8.3.4,<9.0.0",
    "pre-commit>=4.1.0,<5.0.0",
    "nbqa>=1.9.1,<2.0.0; extra == 'toolchain'",
    "pip-audit>=2.8.0,<3.0.0",
    "typos>=1.29.5,<2.0.0"
]

docs = [
    "numpydoc>=1.8.0,<2.0.0",
    "sphinx>=8.1.3,<9.0.0",
    "sphinxcontrib-apidoc>=0.5.0,<0.6.0",
    "sphinx-autodoc-typehints>=2.5.0,<3.0.0",
    "myst-parser>=4.0.0,<5.0.0",
    "sphinx-design>=0.6.1,<0.7.0",
    "sphinx-copybutton>=0.5.2,<0.6.0",
    "sphinx-autoapi>=3.4.0,<4.0.0",
    "nbsphinx>=0.9.5,<0.10.0",
    "ipython>=8.32.0,<9.0.0",
    "ipykernel>=6.29.5,<7.0.0",
    "furo>=2024.8.6,<2025.0.0",
    "sphinx-autobuild==2024.10.3"
]

[project.scripts]
mmlearn_run = "mmlearn.cli.run:main"

[tool.mypy]
ignore_missing_imports = true
install_types = true
pretty = true
namespace_packages = true
explicit_package_bases = true
non_interactive = true
warn_unused_configs = true
allow_any_generics = false
allow_untyped_calls = false
allow_untyped_defs = false
allow_incomplete_defs = false
check_untyped_defs = true
allow_untyped_decorators = false
warn_unreachable = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
implicit_reexport = false
strict_equality = true
extra_checks = true

[tool.ruff]
include = ["*.py", "pyproject.toml", "*.ipynb"]
line-length = 88

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint]
select = ["A", "B", "COM", "C4", "RET", "SIM", "ICN", "Q", "RSE", "D", "E", "F", "I", "W", "N", "ERA", "PL"]
fixable = ["A", "B", "COM", "C4", "RET", "SIM", "ICN", "Q", "RSE", "D", "E", "F", "I", "W", "N", "ERA", "PL"]
ignore = ["E501", "C901", "PLR0913", "PLR2004", "COM812"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401", "F403", "F811"]
"projects/*" = ["D", "F", "I"]

[tool.ruff.lint.pep8-naming]
ignore-names = ["X*", "setUp*"]

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
pythonpath = ["."]
markers = ["integration_test: marks tests as integration tests"]

[tool.typos.default.extend-words]
MUC = "MUC"
